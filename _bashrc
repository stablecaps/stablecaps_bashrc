# .bashrc

### Uncomment for error checking .bashrc
# set -eE -o functrace

# file1=f1
# file2=f2
# file3=f3
# file4=f4

# failure() {
#   local lineno=$1
#   local msg=$2
#   echo "Failed at $lineno: $msg"
#   sleep 60
# }
# trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

#####################################################
####### Profile slow .bashrc code - part 1/2 ########
#####################################################
## https://www.rosipov.com/blog/profiling-slow-bashrc/s
# PS4='+ $(date "+%s.%N")\011 '
# exec 3>&2 2>/tmp/bashstart.$$.log
# set -x
#####################################################
############ Source global definitions ##############
#####################################################

# Set default editor
export VISUAL=vim
EDITOR=vim
export EDITOR


# Load composure first, so we support function metadata
. "${HOME}/stablecaps_bashrc/modules/composure.sh"
# support 'plumbing' metadata
cite _about _param _example _group _author _version

# Source bashrc assets
. "${HOME}/stablecaps_bashrc/theme_settings.sh"
. "${HOME}/stablecaps_bashrc/internal/internal_colour_functions.sh"
. "${HOME}/stablecaps_bashrc/internal/internal_helper_functions.sh"
. "${HOME}/stablecaps_bashrc/internal/internal_colour_defs.sh"
. "${HOME}/stablecaps_bashrc/internal/internal_git_functions.sh"

### Comment/uncomment to activate LS_COLORS - Additional defs can be added using vivid
. "${HOME}/stablecaps_bashrc/internal/internal_ls_colors_defs.sh"
LS_COLORS=$ayu_modified
export LS_COLORS

# source aliases
. "${HOME}/stablecaps_bashrc/aliases/_core-bash_aliases.sh"
. "${HOME}/stablecaps_bashrc/aliases/docker_aliases.sh"
. "${HOME}/stablecaps_bashrc/aliases/docker-compose_aliases.sh"
. "${HOME}/stablecaps_bashrc/aliases/git_aliases.sh"
if command -v apt &> /dev/null; then
    . "${HOME}/stablecaps_bashrc/aliases/apt_aliases.sh"
fi
#
. "${HOME}/stablecaps_bashrc/aliases/terraform_aliases.sh"


### TODO: fix bug with slow completions
# source completions
# if ! shopt -oq posix; then
#   if [ -f /usr/share/bash-completion/bash_completion ]; then
#     . /usr/share/bash-completion/bash_completion
#   elif [ -f /etc/bash_completion ]; then
#     . /etc/bash_completion
#   fi
# fi

# . "${HOME}/stablecaps_bashrc/completions/docker_completion.sh"
# . "${HOME}/stablecaps_bashrc/completions/docker-compose_completion.sh"
# . "${HOME}/stablecaps_bashrc/completions/awscli_completion.sh"
# . "${HOME}/stablecaps_bashrc/completions/git_completion.sh"


# source bash modules
. "${HOME}/stablecaps_bashrc/modules/aws_module.sh"
. "${HOME}/stablecaps_bashrc/modules/base_module.sh"
. "${HOME}/stablecaps_bashrc/modules/extract.sh"
. "${HOME}/stablecaps_bashrc/modules/docker_module.sh"
. "${HOME}/stablecaps_bashrc/modules/docker-compose_module.sh"
. "${HOME}/stablecaps_bashrc/modules/git_module.sh"
. "${HOME}/stablecaps_bashrc/modules/history_module.sh"
. "${HOME}/stablecaps_bashrc/modules/installer_module.sh"
# . "${HOME}/stablecaps_bashrc/modules/ssh_helper_module.sh"
#. "${HOME}/stablecaps_bashrc/modules/ssh-agent_module.sh"


#################################################################
# make less more friendly for non-text input files, see lesspipe
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[38;5;221m'
export LESS_TERMCAP_md=$'\E[38;5;221m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;35m'

#################################################################
# enable dircolor  support
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

#####################################################
################ Set SHELL Options ##################
#####################################################


# enter a few characters and press UpArrow/DownArrow
# to search backwards/forwards through the history
if [[ ${SHELLOPTS} =~ (vi|emacs) ]]
then
    # https://codeinthehole.com/tips/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
    bind '"\e[A":history-search-backward'
    bind '"\e[B":history-search-forward'
    bind '"\e[C":forward-char'
    bind '"\e[D":backward-char'
fi
##########################################
# history guide: https://www.digitalocean.com/community/tutorials/how-to-use-bash-history-commands-and-expansions-on-a-linux-vps

HISTCONTROL=ignoreboth                   # don't put duplicate lines or lines starting with space in the history.
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend
# shopt -s cmdhist # save all lines of a multiple-line command in the same history entry <- really bad idea
shopt -s cdspell # corrects minor cd spelling errors
# shopt -s cdable_vars # non-dir args supplied to cd are assumned to be vars
shopt -s no_empty_cmd_completion # tell bash/completion to NOT try completion for an empty entry


# https://superuser.com/questions/288714/bash-autocomplete-like-zsh
bind 'set show-all-if-ambiguous on'
bind 'set colored-completion-prefix on'

#####################################################
################ PS Command Prompt ##################
#####################################################
force_color_prompt="" #"yes"
if [ -z "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# SET_FULL_PROMPT" # set in theme_settings.sh
if [ "$color_prompt" == "yes" ]; then
    if [ "$SET_FULL_PROMPT" == "full" ] ; then
        function prompt_command() {
            # Custom fully featured 3 line prompt with most git support

            ###################################################
            ### identify success/fail status of last command
            ### DO NOT MOVE THIS VARIABLE: must be first!
            local last_status="$?"
            ###################################################
            ###################################################
            ### Setup if else for different color themes
            PATH_COL_VAR="${SET_PATHCOL_VAR}"
            PATH_COL="${SET_PATHCOL}"
            THEME_VAR="${SET_THEME_VAR}"
            BARCOL="${SET_BARCOL}"
            TXTCOL="${SET_TXTCOL}"

            ###################################################
            ### Turn the prompt symbol red if the user is root
            ### root stuff
            if [[ $(id -u) -eq 0 ]]; then
                ### root color
                BARCOL="${MORANGE}"
                TXTCOL="${RED}"
                local ENDBIT="#"
            else
                local ENDBIT="$"
            fi # root bit

            ###################################################
            ### Display virtual environment notification  if applicable
            ## disable the default virtualenv prompt change
            export VIRTUAL_ENV_DISABLE_PROMPT=1

            VIRTENV=$(_virtualenv_info)

            ### Display ssh variable notification in prompt if applicable
            SSH_SESSION=$(_ssh_info)

            ### Display AWS profile if applicable
            CURR_AWS_PROFILE=$(_aws_info)

            # Display tty no in prompt
            local TTY_VAR=`tty 2> /dev/null | awk -F/ '{nlast = NF 0;print $nlast$NF": "}'`

            ###################################################
            ### set color coded error string for prompt depending on success of last command
            if [[ $last_status == 0 ]]; then
                ERRPROMPT="\[\033[1;1;32m\]${ENDBIT} "
            else
                ERRPROMPT='\[\033[1;1;31m\]X '
            fi

            ###################################################
            ### set titlebar
            local TITLEBAR=`_pwdtail`
            echo -ne '\033]2;'${TTY_VAR}${TITLEBAR}'\007'

## move out of indented tabs to avoid formatting horror (still in function)
PS1="${debian_chroot:+($debian_chroot)}\n\
${BARCOL}┌──\
${TXTCOL}[\u]\
${BARCOL}─\
${TXTCOL}[\H]\
$(_parse_git)\
${VIRTENV}${SSH_SESSION}${CURR_AWS_PROFILE}
${BARCOL}│${DKGRAY}${TTY_VAR}${PATH_COL}> \w \
\n${BARCOL}└──\
${TXTCOL}`date +"%H:%M"`\
${BARCOL}─\
${ERRPROMPT}${TERGREEN}"
}

    elif [ "$SET_FULL_PROMPT" == "mid" ]; then
        function prompt_command() {
            ###################################################
            ### identify success/fail status of last command
            ### DO NOT MOVE THIS VARIABLE: must be first!
            local last_status="$?"
            ###################################################

            # Custom partially featured 2 line prompt with minimal git support
            PATH_COL_VAR="${SET_PATHCOL_VAR}"
            PATH_COL="${SET_PATHCOL}"
            THEME_VAR="${SET_THEME_VAR}"
            BARCOL="${SET_BARCOL}"
            TXTCOL="${SET_TXTCOL}"

            ###################################################
            ### Display virtual environment notification  if applicable
            ## disable the default virtualenv prompt change
            export VIRTUAL_ENV_DISABLE_PROMPT=1

            VIRTENV=$(_virtualenv_min_info)

            ### Display ssh variable notification in prompt if applicable
            SSH_SESSION=$(_ssh_info)

            ### get parent directory
            FULL_PATH=$(pwd)
            LAST2_DIR=${FULL_PATH#"${FULL_PATH%/*/*}/"}

            ###################################################
            ### set color coded error string for prompt depending on success of last command
            if [[ $last_status == 0 ]]; then
                ERRPROMPT="\[\033[1;1;32m\]$ "
            else
                ERRPROMPT='\[\033[1;1;31m\]X '
            fi

            ###################################################

            #DRIVE_PATH=$(df . | tail -1 | awk '{print $1}')
            #DRIVE_ID=${DRIVE_PATH#"${DRIVE_PATH%/*}/"}

## move out of indented tabs to avoid formatting horror (still in function)
PS1="${debian_chroot:+($debian_chroot)}\n\
${BARCOL}\
${TXTCOL}(`date +"%H:%M"`)${BARCOL}─${TXTCOL}(\u@\H)\
${BARCOL}─${GRAY}(${GRAY}${LAST2_DIR})\
$(_parse_git_minimal)\n\
${BARCOL}\
${RED}${VIRTENV} ${ERRPROMPT}${TERGREEN}"
}

    else # $SET_FULL_PROMPT != "yes" or "mid"
        function prompt_command() {
            # basic ubuntu color prompt
            PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
        }
        #unset color_prompt force_color_prompt
    fi
else # color_prompt !="yes"
    function prompt_command() {
        # very basic ubuntu non-color prompt
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    }
    #unset color_prompt force_color_prompt
fi

### Prompt command
PROMPT_COMMAND="prompt_command"

#####################################################
############### Set EnvironmentVars #################
#####################################################

# Entry for directory autojump: https://github.com/wting/autojump
# needs to be at end
[[ -s ${HOME}/.autojump/etc/profile.d/autojump.sh ]] && source ${HOME}/.autojump/etc/profile.d/autojump.sh


#####################################################
####### Profile slow .bashrc code - part 2/2 ########
#####################################################
# set +x
# exec 2>&3 3>&-
#####################################################

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#. "$HOME/.cargo/env"
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
